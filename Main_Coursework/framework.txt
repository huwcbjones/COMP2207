package shared.interfaces;

import shared.Notification;

import java.rmi.Remote;
import java.rmi.RemoteException;

/**
 * Notification Sink Interface
 *
 * @author Huw Jones
 * @since 02/12/2016
 */
public interface INotificationSink extends Remote {

    /**
     * Notifies a Sink
     *
     * @param notification Notification
     * @throws RemoteException
     */
    void notify(Notification notification) throws RemoteException;
}

package shared.interfaces;

import shared.exceptions.RegisterFailException;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.UUID;

/**
 * Notification Source Interface
 *
 * @author Huw Jones
 * @since 02/12/2016
 */
public interface INotificationSource extends Remote {

    /**
     * Registers a sink to receive shared.util.notifications
     *
     * @param sink Sink to register
     * @return True if Sink was successfully registered
     * @throws RemoteException
     */
    UUID register(INotificationSink sink) throws RemoteException, RegisterFailException;

    /**
     * Registers a sink to receive shared.util.notifications
     *
     * @param sinkID ID of sink
     * @param sink   Sink to register
     * @return True if Sink was successfully registered
     * @throws RemoteException
     */
    boolean register(UUID sinkID, INotificationSink sink) throws RemoteException, RegisterFailException;

    /**
     * Returns whether a sink is registered or not
     *
     * @param sink Sink to check
     * @return True if the sink is registered
     * @throws RemoteException
     */
    boolean isRegistered(INotificationSink sink) throws RemoteException;

    /**
     * Unregisters a sink from the source
     *
     * @param sink Sink to unregister
     * @return True if sink was unregistered
     * @throws RemoteException
     */
    boolean unRegister(INotificationSink sink) throws RemoteException;

    /**
     * Unregisters a sink from the source
     *
     * @param sinkID Sink to unregister
     * @return True if sink was unregistered
     * @throws RemoteException
     */
    boolean unRegister(UUID sinkID) throws RemoteException;
}

package shared.interfaces;

import shared.Notification;

/**
 * Sink Callback Interface
 *
 * @author Huw Jones
 * @since 13/12/2016
 */
public interface ISinkCallbackHandler {

    /**
     * Sink Notification callback method
     * @param notification Notification received
     */
    void notify(Notification notification);
}

package shared;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Calendar;

/**
 * Notification Class
 *
 * @author Huw Jones
 * @since 21/11/2016
 */
public class Notification<T extends Serializable> implements Serializable {
    private static long serialUID = -783483475;

    private final String source;
    private final T data;
    private final Timestamp time;
    private final PRIORITY priority;

    public Notification(String source, T data) {
        this.source = source;
        this.priority = PRIORITY.Normal;
        this.data = data;
        this.time = new Timestamp(Calendar.getInstance().getTime().getTime());
    }

    public Notification(String source, PRIORITY priority, T data) {
        this.source = source;
        this.priority = priority;
        this.data = data;
        this.time = new Timestamp(Calendar.getInstance().getTime().getTime());
    }

    /**
     * Get the SourceID of the notification
     * @return SourceID
     */
    public String getSource() {
        return source;
    }

    @Override
    public String toString() {
        return String.format("notification: {\n  date: %s,\n  priority: %s,\n  data: %s\n}", this.getTime(), this.getPriority(), this.getData());
    }

    /**
     * Get the time the notification was sent
     * @return Time notification was sent
     */
    public Timestamp getTime() {
        return time;
    }

    /**
     * Get the priority of the notification
     * @return Notification priority
     */
    public PRIORITY getPriority() {
        return priority;
    }

    /**
     * Get the notification data
     * @return Data
     */
    public T getData() {
        return data;
    }

    public enum PRIORITY {
        Lowest,
        Low,
        Normal,
        High,
        Highest
    }
}

package server;

import shared.Notification;
import shared.exceptions.ConnectException;
import shared.exceptions.RegisterFailException;
import shared.interfaces.INotificationSink;
import shared.interfaces.INotificationSource;
import shared.interfaces.INotificationSourceProxy;
import shared.util.*;

import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.RMISocketFactory;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * A Notification Source
 * Send shared.util.notifications to sinks
 *
 * @author Huw Jones
 * @since 02/12/2016
 */
public abstract class NotificationSource extends UnicastRemoteObject implements INotificationSource {
    protected static WorkerPool workPool;
    /**
     * ID of the source (used to bind to the registry server)
     */
    protected final String sourceID;
    /**
     * RMI Registry Server
     */
    protected Registry registry;
    private INotificationSourceProxy proxy;
    private String registryServer;
    private int registryPort;
    /**
     * Map of sinks (UUID=>sink) that are registered to this source
     */
    private ConcurrentHashMap<UUID, INotificationSink> registeredSinks;
    /**
     * Data structure to keep shared.util.notifications that cannot be delivered to sinks.
     * 1 queue for each sink.
     */
    private HashMap<UUID, ConcurrentLinkedQueue<Notification>> notificationQueue;

    public NotificationSource() throws RemoteException {
        this(Config.getServerID());
    }

    public NotificationSource(String sourceID) throws RemoteException {
        super();
        Runtime.getRuntime().addShutdownHook(new ShutdownHandler());
        this.sourceID = sourceID;
        this.registeredSinks = new ConcurrentHashMap<>();
        this.notificationQueue = new HashMap<>();
        try {
            RMISocketFactory.setSocketFactory(new CustomRMISocketFactory());
        } catch (IOException e) {
            Log.Warn("Failed to add custom RMI Socket Factory...");
        }
        startWorkers();
    }

    /**
     * Dispatches an event handler in the EDT (any worker pool thread).
     * Or, if the server isn't running, just run the event handler in the current thread.
     *
     * @param event Event to dispatch
     */
    public static void dispatchEvent(RunnableAdapter event) {
        if (NotificationSource.workPool != null &&NotificationSource.workPool.isRunning()) {
            NotificationSource.workPool.dispatchEvent(event);
        } else {
            event.run();
        }
    }

    /**
     * Starts the Worker Pool
     */
    private void startWorkers() {
        Log.Info("Starting workers...");
        NotificationSource.workPool = new WorkerPool(Config.getThreadNumber());
    }

    /**
     * Binds this source to the RMI Registry server using the Proxy Source,
     * then falls back to RMI binding if the server is the localhost.
     * Otherwise fails to bind.
     *
     * @throws ConnectException Thrown if failed to connect to the registry server
     */
    public void bind() throws ConnectException {
        String server = (Config.getRmiServer() == null) ? "localhost" : Config.getRmiServer();
        int port = (Config.getRmiPort() == null) ? 1099 : Config.getRmiPort();
        bind(server, port);
    }

    /**
     * Binds this source to the RMI Registry server using the Proxy Source,
     * then falls back to RMI binding if the server is the localhost.
     * Otherwise fails to bind.
     *
     * @param registryServer Server hostname
     * @param registryPort   Server port
     * @throws ConnectException Thrown if failed to connect to the registry server
     */
    public void bind(String registryServer, int registryPort) throws ConnectException {
        this.proxy = null;

        // Connect to the registry
        registry = RMIUtils.connect(registryServer, registryPort);

        // We are now connected to the registry server
        this.registryServer = registryServer;
        this.registryPort = registryPort;

        Log.Info("Registering " + this.sourceID + "...");

        try {
            // Try to register using the proxy
            INotificationSourceProxy proxy = (INotificationSourceProxy) registry.lookup("SourceProxy");
            proxy.register(sourceID, this);
            this.proxy = proxy;
            Log.Info("Registered " + this.sourceID + "!");

        } catch (RemoteException | NotBoundException ex) {
            // If the proxy is not available and the rmi server is running locally, bind straight to the local registry
            // Clients will still be able to access the source through specifying the SourceID, but they won't get notified when
            // Sources register/unregister with the proxy server.
            if (!registryServer.equals("localhost")) {
                throw new ConnectException("Failed to register source (using SourceProxy).", ex);
            }

            Log.Warn(String.format("Failed to register %s (using SourceProxy)... attempting straight bind", sourceID));
            try {
                // Bind using the localhost registry
                registry.rebind(sourceID, this);
                Log.Info("Registered " + this.sourceID + "!");
            } catch (RemoteException e) {
                throw new ConnectException("Failed to register source.", e);
            }
        }
    }

    /**
     * Binds this source to the RMI Registry server using the Proxy Source,
     * then falls back to RMI binding if the server is the localhost.
     * Otherwise fails to bind.
     *
     * @param registryServer Server hostname
     * @throws ConnectException Thrown if failed to connect to the registry server
     */
    public void bind(String registryServer) throws ConnectException {
        bind(registryServer, 1099);
    }

    /**
     * Binds this source to the RMI Registry server using the Proxy Source,
     * then falls back to RMI binding if the server is the localhost.
     * Otherwise fails to bind.
     *
     * @param registryPort   Server port
     * @throws ConnectException Thrown if failed to connect to the registry server
     */
    public void bind(int registryPort) throws ConnectException {
        bind("localhost", registryPort);
    }

    /**
     * Registers a sink to receive shared.util.notifications
     *
     * @param sink Sink to register
     * @return True if Sink was successfully registered
     * @throws RemoteException       If the method could not be called
     * @throws RegisterFailException If the sink failed to register
     */
    @Override
    public UUID register(INotificationSink sink) throws RemoteException, RegisterFailException {
        UUID id = getUUID();
        register(id, sink);
        return id;
    }

    /**
     * Registers a sink to receive shared.util.notifications
     *
     * @param sinkID ID of sink
     * @param sink   Sink to register
     * @return True if Sink was successfully registered
     * @throws RemoteException
     */
    @Override
    public boolean register(UUID sinkID, INotificationSink sink) throws RemoteException, RegisterFailException {
        if (!isRegistered(sinkID)) {
            try {
                // If the sink doesn't have a UUID, create one
                if (sinkID == null) sinkID = getUUID();

                // Store the sink
                this.registeredSinks.put(sinkID, sink);

                // Create the queue for storing messages that fail to send
                this.notificationQueue.put(sinkID, new ConcurrentLinkedQueue<>());
                Log.Info("Sink registered: " + UUIDUtils.UUIDToBase64String(sinkID));
                return true;
            } catch (Exception e) {
                Log.Error(e.toString());
            }
        } else {
            this.registeredSinks.put(sinkID, sink);
            Log.Info("Sink reregistered: " + UUIDUtils.UUIDToBase64String(sinkID));
            sendQueue(sinkID);
            return true;
        }

        throw new RegisterFailException();
    }

    /**
     * Returns whether a sink is registered or not
     *
     * @param sink Sink to check
     * @return True if the sink is registered
     * @throws RemoteException
     */
    public boolean isRegistered(INotificationSink sink) throws RemoteException {
        return registeredSinks.containsValue(sink);
    }

    /**
     * Unregisters a sink from the source
     *
     * @param sink Sink to unregister
     * @return True if sink was unregistered
     * @throws RemoteException
     */
    @Override
    public boolean unRegister(INotificationSink sink) throws RemoteException {
        if (isRegistered(sink)) {
            // Get the sink UUID
            UUID sinkID = this.registeredSinks
                    .entrySet()
                    .stream()
                    .filter(e -> e.getValue().equals(sink))
                    .map(Map.Entry::getKey)
                    .findFirst()
                    .orElse(null);
            return sinkID == null || unRegister(sinkID);
        }
        return isRegistered(sink);
    }

    /**
     * Unregisters a sink from the source by SinkID
     *
     * @param sinkID SinkID to unregister
     * @return True if sink was unregistered
     * @throws RemoteException
     */
    public boolean unRegister(UUID sinkID) throws RemoteException {
        if (isRegistered(sinkID)) {
            this.registeredSinks.remove(sinkID);
            this.notificationQueue.remove(sinkID);
            Log.Info("Sink unregistered: " + UUIDUtils.UUIDToBase64String(sinkID));
        }
        return isRegistered(sinkID);
    }

    /**
     * Gets an unused UUID
     *
     * @return UUID
     */
    private UUID getUUID() {
        UUID uuid;
        do {
            uuid = UUID.randomUUID();
        } while (_isRegistered(uuid));
        return uuid;
    }

    /**
     * Returns whether a sink is registered to an ID or not
     *
     * @param sinkID SinkID to check
     * @return True if the sink is registered
     */
    private boolean _isRegistered(UUID sinkID) {
        return registeredSinks.containsKey(sinkID);
    }

    /**
     * Returns whether a sink is registered to an ID or not
     *
     * @param sinkID SinkID to check
     * @return True if the sink is registered
     * @throws RemoteException
     */
    public boolean isRegistered(UUID sinkID) throws RemoteException {
        return _isRegistered(sinkID);
    }

    /**
     * Sends the queue of missed notifications to the sink
     * @param sinkID
     */
    private void sendQueue(UUID sinkID) {
        // Get the sink, and the sink's queue
        INotificationSink sink = this.registeredSinks.get(sinkID);
        ConcurrentLinkedQueue<Notification> queue = this.notificationQueue.get(sinkID);

        // Send all the notifications in the queue
        // We are peeking to get the notification, then after we know it's been sent, removing it
        Notification notification;
        while ((notification = queue.peek()) != null) {
            try {
                sink.notify(notification);
                queue.remove();
            } catch (RemoteException e) {
                Log.Warn("Failed to send message to: " + UUIDUtils.UUIDToBase64String(sinkID));
                break;
            }
        }
    }

    /**
     * Sends a notification to all registered sinks, or if sending failed,
     * queues it to be sent at a later date.
     *
     * @param notification Notification to send
     */
    protected void sendNotification(Notification notification) {
        registeredSinks.entrySet().forEach(map -> dispatchEvent(new NotificationProcessor(map, notification)));
    }

    /**
     * Queues a notification for delivery at a later date if the notification could not be delivered
     *
     * @param sinkID       Sink that could not be reached
     * @param notification Notification that could not be sent
     */
    private void queueNotification(UUID sinkID, Notification notification) {
        this.notificationQueue.get(sinkID).add(notification);
    }

    private class NotificationProcessor extends RunnableAdapter {

        UUID sinkID;
        INotificationSink sink;
        Notification notification;

        public NotificationProcessor(Map.Entry<UUID, INotificationSink> sinkEntry, Notification notification){
            sinkID = sinkEntry.getKey();
            sink = sinkEntry.getValue();
            this.notification = notification;
        }
        @Override
        public void runSafe() throws Exception {
            try {
                Log.Trace("Sending message to: " + UUIDUtils.UUIDToBase64String(sinkID));
                sink.notify(notification);

                // If we successfully sent a notification, check if the queue is empty, if not, empty it (as we can now send notifications)
                if(notificationQueue.get(sinkID).size() != 0){
                    sendQueue(sinkID);
                }
            } catch (RemoteException e) {
                Log.Warn(String.format("Failed to send message to: %s. Queuing for delivery later. ", UUIDUtils.UUIDToBase64String(sinkID)));
                queueNotification(sinkID, notification);
            }
        }
    }

    /**
     * Unbinds the source from the registry
     */
    private class ShutdownHandler extends Thread {

        public ShutdownHandler() {
            super("ShutdownHandler");
        }

        @Override
        public void run() {
            if (registry == null) {
                return;
            }

            if (proxy != null) {
                Log.Info("Unregistering " + sourceID + "...");
                try {
                    proxy.unregister(sourceID);
                    Log.Info("Unregistered " + sourceID);
                } catch (RemoteException e) {
                    Log.Warn(String.format("Failed to unregister %s: %s", sourceID, e.getMessage()));
                    e.printStackTrace();
                }
                return;
            }

            if (!registryServer.equals("localhost")) {
                return;
            }

            try {
                if (Arrays.stream(registry.list()).anyMatch(e -> e.equals(sourceID))) {
                    Log.Info("Unbinding " + sourceID + "...");
                    registry.unbind(sourceID);
                    Log.Info("Unbound " + sourceID);
                }
            } catch (NotBoundException shouldNotHappen) {
            } catch (RemoteException ex) {
                Log.Warn("Failed to unbind " + sourceID);
            }

            if(NotificationSource.workPool != null){
                NotificationSource.workPool.shutdown();
            }
        }
    }
}

package client;

import javafx.util.Pair;
import shared.Notification;
import shared.exceptions.ConnectException;
import shared.exceptions.RegisterFailException;
import shared.interfaces.INotificationSink;
import shared.interfaces.INotificationSource;
import shared.interfaces.ISinkCallbackHandler;
import shared.util.CustomRMISocketFactory;
import shared.util.Log;
import shared.util.RMIUtils;

import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.RMISocketFactory;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * A Notification Sink
 * Receives shared.util.notifications from sources
 *
 * @author Huw Jones
 * @since 12/12/2016
 */
public class NotificationSink extends UnicastRemoteObject implements INotificationSink {

    protected Registry registry;
    protected INotificationSource sourceProxy;

    private HashMap<String, ISinkCallbackHandler> callbackRegistry;
    private ConcurrentHashMap<String, INotificationSource> sources;

    public NotificationSink() throws RemoteException {
        super();
        Runtime.getRuntime().addShutdownHook(new ShutdownHandler());
        sources = new ConcurrentHashMap<>();
        callbackRegistry = new HashMap<>();

        try {
            RMISocketFactory.setSocketFactory(new CustomRMISocketFactory());
        } catch (IOException e) {
            Log.Warn("Failed to add custom RMI Socket Factory...");
        }
    }

    /**
     * Connect to an RMI server running on server:port.
     *
     * @param server Server to connect to
     * @param port   Port to connect to
     * @throws ConnectException Thrown if failed to connect
     */
    @SuppressWarnings("unchecked")
    public void connectRMIProxy(String server, int port) throws ConnectException {
        connectRMIProxy(server, port, null);
    }
    /**
     * Connect to an RMI server running on server:port.
     *
     * @param server Server to connect to
     * @param port   Port to connect to
     * @throws ConnectException Thrown if failed to connect
     */
    @SuppressWarnings("unchecked")
    public void connectRMIProxy(String server, int port, ISinkCallbackHandler callbackHandler) throws ConnectException {
        this.sourceProxy = null;
        this.registry = null;
        Log.Info("Connecting to registry...");
        registry = RMIUtils.connect(server, port);
        Log.Info("Connected to registry!");

        Log.Info("Registering with SourceProxy...");

        try {
            // Connect and register with the proxy source
            INotificationSource proxy = (INotificationSource) registry.lookup("SourceProxy");

            // If the callback has been provided, combine the Log statement and callback into one callback and store it for later
            if(callbackHandler != null) {
                this.callbackRegistry.put("SourceProxy", (e) -> {
                    Log.Info("Received list of sources (" + ((List<Pair<String, INotificationSource>>) e.getData()).size() + ")");
                    callbackHandler.notify(e);
                });
            } else {
                this.callbackRegistry.put("SourceProxy", (e) -> Log.Info("Received list of sources (" + ((List<Pair<String, INotificationSource>>) e.getData()).size() + ")"));
            }

            if(Config.getClientID() == null) {
                UUID sinkID = proxy.register(this);
                Config.setClientID(sinkID);
            } else {
                proxy.register(Config.getClientID(), this);
            }
            this.sourceProxy = proxy;

            Log.Info("Registering with SourceProxy!");
        } catch (RemoteException | NotBoundException | RegisterFailException ex) {
            // Remove callback if connection failed.
            this.callbackRegistry.remove("SourceProxy");
            throw new ConnectException("Failed to register with SourceProxy.", ex);
        }
    }

    /**
     * Connect to an RMI server running on server:port.
     *
     * @param server Server to connect to
     * @param port   Port to connect to
     * @throws ConnectException Thrown if failed to connect to registry
     */
    public void connectRMI(String server, int port) throws ConnectException {
        this.registry = null;
        this.registry = RMIUtils.connect(server, port);
    }

    /**
     * Connects this sink to a source
     *
     * @param sourceID Source to connect to
     * @throws ConnectException
     */
    public void connectSource(String sourceID) throws ConnectException {
        connectSource(sourceID, null);
    }

    /**
     * Connects this sink to a source
     *
     * @param sourceID Source to connect to
     * @param handler  A runnable to be run when the sink is notified of notifications
     * @throws ConnectException
     */
    public void connectSource(String sourceID, ISinkCallbackHandler handler) throws ConnectException {
        if (!isConnectedRMI()) {
            throw new ConnectException("Not connected to remote server.");
        }

        try {
            INotificationSource source = (INotificationSource) registry.lookup(sourceID);
            if(Config.getClientID() == null) {
                UUID sinkID = source.register(this);
                Config.setClientID(sinkID);
            } else {
                source.register(Config.getClientID(), this);
            }
            Log.Info(String.format("Registered with '%s'!", sourceID));

            this.sources.put(sourceID, source);
            if (handler != null) this.callbackRegistry.put(sourceID, handler);
        } catch (NotBoundException ex) {
            throw new ConnectException(String.format("Failed to register with '%s' - source could not be found.", sourceID), ex);
        } catch (RemoteException | RegisterFailException ex) {
            throw new ConnectException(String.format("Failed to register with '%s'.", sourceID), ex);
        }
    }

    /**
     * Disconnects this sink from a specified source
     * @param sourceID Source to disconnect from
     */
    public void disconnectSource(String sourceID) {
        Log.Info(String.format("Disconnecting from %s...", sourceID));
        if (!this.sources.containsKey(sourceID)) {
            return;
        }
        INotificationSource source = this.sources.get(sourceID);
        try {
            // Unregister so the source knows we don't want notifications anymore
            source.unRegister(Config.getClientID());
            sources.remove(sourceID);
            callbackRegistry.remove(sourceID);

            Log.Info(String.format("Disconnected from '%s'.", sourceID));
        } catch (RemoteException e) {
            Log.Error(String.format("Failed to unregister from '%s': %s", sourceID, e.getMessage()));
        }
    }

    /**
     * Disconnects this sink from all sources it is connected to
     */
    public void disconnectAllSource() {
        Log.Info("Disconnecting from all sources...");
        sources.entrySet().forEach(e -> disconnectSource(e.getKey()));
        Log.Info("Disconnected from all sources!");
    }

    /**
     * Disconnects this sink from the RMI Proxy Source
     */
    public void disconnectRMIProxy() {
        if (sourceProxy == null) {
            return;
        }
        try {
            Log.Info("Disconnecting from RMI registry (Source Proxy)...");
            sourceProxy.unRegister(Config.getClientID());
            Log.Info("Disconnected from RMI registry (Source Proxy)!");
        } catch (RemoteException e) {
            Log.Error("Failed to unregister from SourceProxy: " + e.getMessage());
        }
    }

    /**
     * Gets whether or not the sink is connected to an RMI server
     *
     * @return True if connected
     */
    public boolean isConnectedRMI() {
        return registry != null;
    }

    /**
     * Gets whether or not the sink is connected to an RMI Proxy server
     *
     * @return True if connected
     */
    public boolean isConnectedRMIProxy() {
        return sourceProxy != null;
    }

    /**
     * Gets whether or not the sink is connected to any sources
     *
     * @return True if the sink is connected to a source
     */
    public boolean isConnectedSource() {
        return sources.size() != 0;
    }

    /**
     * Notifies a Sink
     *
     * @param notification Notification
     * @throws RemoteException
     */
    @Override
    public void notify(Notification notification) throws RemoteException {
        if (!callbackRegistry.containsKey(notification.getSource())) {
            Log.Warn(String.format("No handler registered for %s. Logging to console.", notification.getSource()));
            Log.Info(notification.toString());
            return;
        }
        ISinkCallbackHandler callback = callbackRegistry.get(notification.getSource());
        callback.notify(notification);
    }

    /**
     * Class to cleanly unregister/disconnect from all sources if the user gracefully terminates the JVM.
     * GUI close button, ^C, etc
     */
    private class ShutdownHandler extends Thread {

        public ShutdownHandler() {
            super("ShutdownHandler");
        }

        @Override
        public void run() {
            if (isConnectedSource()) {
                disconnectAllSource();
            }
            if (isConnectedRMIProxy()) {
                disconnectRMIProxy();
            }
        }
    }
}
